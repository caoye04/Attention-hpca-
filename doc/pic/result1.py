import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# 数据准备
data = {
    'Size': [63, 64, 65, 127, 128, 129, 191, 192, 193, 255, 256, 257, 319, 320, 321, 383, 384, 385, 447, 448, 449, 511, 512, 513, 575, 576, 577, 639, 640, 641, 703, 704, 705, 767, 768, 769, 831, 832, 833, 895, 896, 897, 959, 960, 961, 1023, 1024, 1025, 1087, 1088, 1089, 1151, 1152, 1153, 1215, 1216, 1217, 1279, 1280, 1281, 1343, 1344, 1345, 1407, 1408, 1409, 1471, 1472, 1473, 1535, 1536, 1537, 1599, 1600, 1601, 1663, 1664, 1665, 1727, 1728, 1729, 1791, 1792, 1793, 1855, 1856, 1857, 1919, 1920, 1921, 1983, 1984, 1985, 2047, 2048, 2049, 4095, 4096, 4097, 8191, 8192, 8193],
    'Version1': [7.63, 7.82, 8.42, 49.4, 45.4, 51.8, 119, 88.6, 120, 196, 146, 199, 284, 191, 285, 409, 272, 398, 545, 351, 546, 678, 418, 682, 742, 450, 741, 736, 468, 735, 943, 547, 936, 904, 555, 898, 1040, 596, 1030, 1130, 633, 1120, 1020, 627, 1010, 1310, 686, 1270, 1120, 665, 1120, 1240, 695, 1230, 1290, 712, 1280, 1040, 687, 1040, 1180, 713, 1170, 1270, 733, 1250, 1240, 739, 1230, 1150, 733, 1140, 1180, 732, 1170, 1290, 754, 1270, 1260, 756, 1250, 1340, 763, 1330, 1300, 766, 1280, 1160, 751, 1150, 1340, 774, 1330, 1470, 785, 1440, 1560, 803, 1540, 1590, 818, 1560],
    'Version2': [8.09, 8.13, 8.93, 51.6, 46.2, 53.6, 120, 93.8, 120, 200, 148, 202, 283, 198, 284, 410, 279, 399, 553, 357, 552, 691, 423, 694, 747, 458, 745, 734, 476, 733, 953, 552, 946, 905, 562, 898, 1050, 602, 1040, 1140, 637, 1130, 1010, 634, 1000, 1320, 689, 1280, 1120, 669, 1120, 1250, 700, 1230, 1300, 715, 1290, 1080, 692, 1080, 1250, 718, 1240, 1360, 736, 1350, 1320, 741, 1310, 1220, 737, 1210, 1250, 737, 1240, 1350, 756, 1340, 1320, 755, 1310, 1400, 762, 1380, 1340, 765, 1340, 1200, 754, 1190, 1390, 775, 1380, 1520, 784, 1490, 1580, 800, 1550, 1590, 817, 1570],
    'Version3': [7.89, 8.09, 8.48, 49.8, 46.0, 50.5, 120, 98.8, 121, 214, 177, 214, 303, 230, 303, 472, 361, 433, 621, 499, 615, 768, 630, 755, 947, 745, 870, 1040, 805, 966, 1240, 1020, 1140, 1300, 1040, 1210, 1390, 1140, 1360, 1490, 1270, 1450, 1570, 1290, 1510, 1730, 1480, 1650, 1760, 1470, 1680, 1810, 1550, 1730, 1830, 1600, 1750, 1790, 1540, 1730, 1940, 1670, 1810, 1950, 1720, 1880, 1980, 1750, 1910, 2010, 1770, 1950, 2060, 1800, 2000, 2080, 1840, 2020, 2130, 1880, 2030, 2150, 1920, 2100, 2160, 1930, 2070, 2160, 1930, 2070, 2230, 2000, 2140, 2270, 2040, 2170, 2490, 2270, 2440, 2550, 2340, 2520],
    'Version4': [8.16, 8.39, 8.95, 52.3, 48.4, 54.0, 124, 102, 124, 211, 176, 213, 321, 241, 318, 479, 366, 469, 646, 521, 633, 813, 667, 809, 955, 752, 938, 1060, 817, 1040, 1260, 1040, 1230, 1320, 1070, 1300, 1470, 1210, 1440, 1600, 1350, 1570, 1660, 1350, 1620, 1820, 1570, 1730, 1820, 1530, 1800, 1940, 1650, 1900, 2030, 1760, 1980, 2000, 1710, 1960, 2110, 1830, 2060, 2180, 1930, 2140, 2210, 1970, 2150, 2210, 1960, 2170, 2240, 1980, 2200, 2280, 2070, 2230, 2300, 2100, 2260, 2300, 2150, 2280, 2330, 2170, 2300, 2330, 2140, 2290, 2370, 2210, 2340, 2400, 2240, 2350, 2550, 2460, 2530, 2500, 2500, 2500],
    'Version5': [8.25, 8.70, 8.28, 58.4, 60.4, 56.6, 175, 179, 168, 374, 382, 361, 659, 668, 635, 1040, 1060, 1000, 1520, 1540, 1470, 2070, 2100, 2030, 2280, 2280, 2240, 2720, 2730, 2820, 3380, 3400, 3500, 3620, 3650, 3220, 2640, 2660, 2800, 2880, 2880, 3270, 3310, 3310, 3730, 3790, 3810, 4100, 4080, 4090, 4610, 4570, 4580, 3840, 3520, 3530, 4240, 3810, 3820, 4560, 4220, 4240, 5000, 4650, 4660, 4380, 3850, 3850, 4640, 4200, 4210, 5090, 4560, 4570, 4760, 3990, 3980, 4860, 4280, 4280, 5200, 4550, 4550, 5170, 4180, 4170, 5090, 4420, 4400, 5410, 4740, 4730, 5110, 4440, 4480, 5390, 4930, 5020, 5950, 4890, 5000, 4970],
    'Version6': [8.33, 8.76, 8.47, 61.3, 63.1, 60.1, 190, 194, 184, 416, 424, 404, 752, 762, 725, 1200, 1230, 1170, 1800, 1810, 1740, 2470, 2500, 2430, 2930, 2940, 2770, 3530, 3560, 3540, 4460, 4450, 4470, 4640, 4700, 3710, 3590, 3620, 3660, 4010, 4020, 4280, 4640, 4650, 4910, 5320, 5330, 5340, 5660, 5670, 5860, 6390, 6400, 5150, 5070, 5060, 5570, 5430, 5430, 6070, 6020, 6020, 6570, 6620, 6620, 5940, 5510, 5510, 6180, 6030, 6040, 6860, 6540, 6540, 6400, 5750, 5730, 6580, 6150, 6150, 7000, 6500, 6490, 6880, 6010, 6000, 6850, 6310, 6290, 7220, 6760, 6750, 6880, 6390, 6410, 7220, 7280, 7310, 7350, 7600, 7520, 7050]
}

df = pd.DataFrame(data)
plt.figure(figsize=(13, 7))

# 设置中文字体
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False

# 设置背景颜色为浅灰色
plt.gca().set_facecolor('#f0f0f0')
plt.grid(True, color='white', linestyle='-', linewidth=1.0, alpha=0.7)

# 设置颜色方案
colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']

# 版本名称
version_names = [
    'Version1-naive',
    'Version2-编译优化',
    'Version3-共享内存优化',
    'Version4-Warp级别优化',
    'Version5-矩阵优化',
    'Version6-向量化'
]

# 绘制每个版本的性能曲线和最大性能线
for i, version in enumerate(['Version1', 'Version2', 'Version3', 'Version4', 'Version5', 'Version6']):
    # 绘制性能曲线
    plt.plot(df['Size'], df[version], 
             label=version_names[i],
             color=colors[i], 
             marker='o', 
             markersize=3, 
             linewidth=1.5, 
             alpha=0.8)
    
    # 计算并绘制最大性能线
    max_perf = df[version].max()
    plt.axhline(y=max_perf, 
                color=colors[i], 
                linestyle='--', 
                alpha=0.5)
    
    # 添加最大值标注
    x_pos = 200
    print (x_pos)
    plt.text(x_pos, max_perf,
             f'max:{max_perf:.1f} Gflops/s', 
             color=colors[i],
             verticalalignment='bottom',
             fontsize=11)

# 设置对数刻度的x轴
plt.xscale('log', base=2)

# 设置x轴的主要刻度
major_ticks = [64, 128, 256, 512, 1024, 2048, 4096, 8192]
plt.xticks(major_ticks, major_ticks)

# 设置标题和标签
plt.title('不同优化版本的性能对比', fontsize=16, pad=20)
plt.xlabel('矩阵大小 (log2 scale)', fontsize=14)
plt.ylabel('性能 (Gflops/s)', fontsize=14)  # 修改了y轴标签

# 添加图例到图表内部左上角
plt.legend(loc='upper left',
          fontsize=10,
          frameon=True,
          facecolor='white',
          edgecolor='gray',
          bbox_to_anchor=(0.01, 0.99))

# 设置y轴范围
plt.ylim(0, max(df['Version6'].max(), df['Version5'].max()) * 1.1)

# 设置边框
for spine in plt.gca().spines.values():
    spine.set_edgecolor('#666666')

# 调整布局
plt.tight_layout()

# 保存图片
plt.savefig('result1.png', dpi=300, bbox_inches='tight')

# 显示图表
plt.show()